/*
 * Copyright (c) 2017, Aarón Durán Sánchez,Javier López de Lerma, Mateo García Fuentes, Carlos López Martínez 
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package pokertrainer.view;

import java.awt.Color;
import javax.swing.border.LineBorder;
import pokertrainer.model.CustomPlayer;

/**
 * Clase de la vista que define el panel para customizar a un jugador de la partida.
 * @author usuario_local
 */
public class CustomPlayerPanel extends javax.swing.JPanel {
    
    private CustomPlayersWindow view;
    private String lastOption = "HUMAN";
    /**
     * Constructor que crea un nuevo panel de customización.
     */
    public CustomPlayerPanel() {
        initComponents();
        this.comboBoxBots.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxPlayerOptions = new javax.swing.JComboBox();
        comboBoxBots = new javax.swing.JComboBox();
        jTextFieldNamePlayer = new javax.swing.JTextField();
        jSpinner1 = new javax.swing.JSpinner();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4));
        setForeground(new java.awt.Color(255, 255, 255));
        setOpaque(false);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Name");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Stack");

        comboBoxPlayerOptions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HUMAN", "BOT" }));
        comboBoxPlayerOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxPlayerOptionsActionPerformed(evt);
            }
        });

        comboBoxBots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxBotsActionPerformed(evt);
            }
        });

        jTextFieldNamePlayer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1000, 1, null, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxPlayerOptions, javax.swing.GroupLayout.Alignment.TRAILING, 0, 144, Short.MAX_VALUE)
                    .addComponent(comboBoxBots, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinner1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldNamePlayer)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldNamePlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboBoxPlayerOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxBots, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que muestra/esconde el comboBox para elegir la clase que contiene el código fuente del bot, en función del tipo de jugador elegido.
     * @param evt Evento producido en la vista.
     */
    private void comboBoxPlayerOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxPlayerOptionsActionPerformed
        String option = this.comboBoxPlayerOptions.getSelectedItem().toString();
        if(!option.equals(this.lastOption)){
            if(option.equals("BOT") ){
                this.lastOption = "BOT";
                this.comboBoxBots.setVisible(true);
                this.view.setVisibleBotCardsButton(true);
                
            }else{
                this.lastOption = "HUMAN";
                this.comboBoxBots.setVisible(false);
                this.view.setVisibleBotCardsButton(false);
            }
        }
    }//GEN-LAST:event_comboBoxPlayerOptionsActionPerformed

    
    private void comboBoxBotsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxBotsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxBotsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboBoxBots;
    private javax.swing.JComboBox comboBoxPlayerOptions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextFieldNamePlayer;
    // End of variables declaration//GEN-END:variables

    /**
     * Método que utiliza la información del panel de customización para crear un objeto <code>CustomPlayer</code>
     * @return Objeto <code>CustomPlayer</code> creado.
     */
    public CustomPlayer getCustomPlayer() {     
      String name;
      String mode;
      String botName = null;
      Integer stack = null;
      
      name = jTextFieldNamePlayer.getText();
      
      mode = comboBoxPlayerOptions.getSelectedItem().toString();
      if(mode.equals("BOT")){
          botName = comboBoxBots.getSelectedItem().toString();
      }
      
      try{
        stack = (Integer) jSpinner1.getValue();
        //if(stack <=0) throws NumberFormatException();
        
      }catch(NumberFormatException e){
          jSpinner1.setBorder(new LineBorder(Color.RED));
      }

      return new CustomPlayer(name, stack, mode, botName);
    }
    
    /**
     * Establece el nombre de los bots a partir del nombre de la clase con su código fuente, eliminando el ".class" final. 
     * @param botNames Lista de nombres de los archivos que contienen el código fuente de los bots.
     */
    public void setBotNames(String[] botNames){
        for (String botName : botNames) {
            botName = botName.substring(0, botName.length() - 6); // para eliminar ".class" de la cadena
            if (!botName.contains("$")) {
                comboBoxBots.addItem(botName);
            }
        }
    }

    /**
     * Establece un stack inicial por defecto que se utilizará si no se modifica ese campo.
     * @param money Stack por defecto.
     */
    void setDefaultStack(int money) {
        this.jSpinner1.setValue(money);
    }
    
    /**
     * Establece un nombre por defecto que se utilizará si no se modifica ese campo.
     * @param i Posición del jugador. Se añade al final del nombre por defevto.
     */
    void setDefaultName(int i) {
        this.jTextFieldNamePlayer.setText("Player "+ i);
    }
    
    /**
     * Establece la ventana de customización.
     * @param v Objeto del tipo <code>CustomPlayersWindow</code>
     */
    void setView(CustomPlayersWindow v){
        this.view = v;
    }
    
    /**
     * Devuelve la cantidad introducida en el campo Stack.
     * @return Stack introducido en el campo Stack
     */  
    public int getStack(){
        return (Integer) this.jSpinner1.getValue();
    }
}
