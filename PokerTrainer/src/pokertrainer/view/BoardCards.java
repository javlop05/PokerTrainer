/*
 * Copyright (c) 2017, Aarón Durán Sánchez,Javier López de Lerma, Mateo García Fuentes, Carlos López Martínez 
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package pokertrainer.view;

import javax.swing.ImageIcon;

/**
 * Clase de la vista encargada de mostrar las cartas del centro de la mesa.
 * @author Javi
 */
public class BoardCards extends javax.swing.JPanel {

    /**
     * Constructor de la clase BoardCards.
     */
    public BoardCards() {
        initComponents();
        hideBoardCards();
    }
    
    /**
     * Método que esconde las cartas de la mesa.
     */
    public void hideBoardCards() {
        cardPanel1.setVisible(false);
        cardPanel2.setVisible(false);
        cardPanel3.setVisible(false);
        cardPanel4.setVisible(false);
        cardPanel5.setVisible(false);
    }
    
    /**
     * Recibe una carta y una posición (entre 1 y 5) de la mesa, y muestra la carta en dicha posición.
     * @param card Imagen de la carta
     * @param numCard Posición de la carta (1º, 2º, 3º, 4º o 5º carta de la mesa).
     */
    public void setCardImage(ImageIcon card, int numCard) {
       switch(numCard){
           case 1: 
               cardPanel1.setCard(card);
               cardPanel1.showCard();
               cardPanel1.setVisible(true);
               break;
           case 2: 
               cardPanel2.setCard(card);
               cardPanel2.showCard();
               cardPanel2.setVisible(true);
               break;
           case 3: 
               cardPanel3.setCard(card);
               cardPanel3.showCard();
               cardPanel3.setVisible(true);
               break;
           case 4:
               cardPanel4.setCard(card);
               cardPanel4.showCard();
               cardPanel4.setVisible(true);
               break;
           case 5:
               cardPanel5.setCard(card);
               cardPanel5.showCard();
               cardPanel5.setVisible(true);
               break;
           default: break;
       }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cardPanel1 = new pokertrainer.view.CardPanel();
        cardPanel2 = new pokertrainer.view.CardPanel();
        cardPanel3 = new pokertrainer.view.CardPanel();
        cardPanel4 = new pokertrainer.view.CardPanel();
        cardPanel5 = new pokertrainer.view.CardPanel();

        setAutoscrolls(true);
        setOpaque(false);

        javax.swing.GroupLayout cardPanel1Layout = new javax.swing.GroupLayout(cardPanel1);
        cardPanel1.setLayout(cardPanel1Layout);
        cardPanel1Layout.setHorizontalGroup(
            cardPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        cardPanel1Layout.setVerticalGroup(
            cardPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 75, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout cardPanel2Layout = new javax.swing.GroupLayout(cardPanel2);
        cardPanel2.setLayout(cardPanel2Layout);
        cardPanel2Layout.setHorizontalGroup(
            cardPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        cardPanel2Layout.setVerticalGroup(
            cardPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout cardPanel3Layout = new javax.swing.GroupLayout(cardPanel3);
        cardPanel3.setLayout(cardPanel3Layout);
        cardPanel3Layout.setHorizontalGroup(
            cardPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        cardPanel3Layout.setVerticalGroup(
            cardPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout cardPanel4Layout = new javax.swing.GroupLayout(cardPanel4);
        cardPanel4.setLayout(cardPanel4Layout);
        cardPanel4Layout.setHorizontalGroup(
            cardPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        cardPanel4Layout.setVerticalGroup(
            cardPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout cardPanel5Layout = new javax.swing.GroupLayout(cardPanel5);
        cardPanel5.setLayout(cardPanel5Layout);
        cardPanel5Layout.setHorizontalGroup(
            cardPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        cardPanel5Layout.setVerticalGroup(
            cardPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cardPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(cardPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
            .addComponent(cardPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
            .addComponent(cardPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
            .addComponent(cardPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
            .addComponent(cardPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private pokertrainer.view.CardPanel cardPanel1;
    private pokertrainer.view.CardPanel cardPanel2;
    private pokertrainer.view.CardPanel cardPanel3;
    private pokertrainer.view.CardPanel cardPanel4;
    private pokertrainer.view.CardPanel cardPanel5;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Método que repinta todas las cartas
     */
    void repaintAll() {
        this.cardPanel1.repaint();
        this.cardPanel2.repaint();
        this.cardPanel3.repaint();
        this.cardPanel4.repaint();
        this.cardPanel5.repaint();
    }
}
